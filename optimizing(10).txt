-- рассматриваем этот запрос
SELECT 
	CONCAT(debtors.name, ' ', debtors.surname, ' ', debtors.patronymic) AS debtor_name, 
	contracts.id AS contract_id
		FROM debtors 
		JOIN contracts ON debtors.id = contracts.debtor_id
		JOIN cessions_groups ON contracts.cession_group_id = cessions_groups.id
		JOIN (SELECT COUNT(*) AS quantity, cession_group_id 
			  FROM cessions
			 	GROUP BY cession_group_id) AS cessions_count
		ON cessions_groups.id = cessions_count.cession_group_id
			WHERE cessions_groups.cessions_amount > cessions_count.quantity
				ORDER BY contracts.id;
				
-- РЕЗУЛЬТАТ EXPLAIN ANALYZE
"Sort  (cost=52.23..52.57 rows=133 width=36) (actual time=0.521..0.533 rows=283 loops=1)"
"  Sort Key: contracts.id"
"  Sort Method: quicksort  Memory: 43kB"
"  ->  Hash Join  (cost=30.98..47.54 rows=133 width=36) (actual time=0.187..0.474 rows=283 loops=1)"
"        Hash Cond: (contracts.debtor_id = debtors.id)"
"        ->  Hash Join  (cost=23.48..39.35 rows=133 width=8) (actual time=0.105..0.247 rows=283 loops=1)"
"              Hash Cond: (contracts.cession_group_id = cessions_groups.id)"
"              ->  Seq Scan on contracts  (cost=0.00..14.00 rows=400 width=12) (actual time=0.006..0.083 rows=400 loops=1)"
"              ->  Hash  (cost=23.32..23.32 rows=13 width=8) (actual time=0.097..0.099 rows=28 loops=1)"
"                    Buckets: 1024  Batches: 1  Memory Usage: 10kB"
"                    ->  Hash Join  (cost=11.55..23.32 rows=13 width=8) (actual time=0.080..0.094 rows=28 loops=1)"
"                          Hash Cond: (cessions_groups.id = cessions_count.cession_group_id)"
"                          Join Filter: (cessions_groups.cessions_amount > cessions_count.quantity)"
"                          Rows Removed by Join Filter: 12"
"                          ->  Seq Scan on cessions_groups  (cost=0.00..11.40 rows=140 width=8) (actual time=0.003..0.008 rows=40 loops=1)"
"                          ->  Hash  (cost=11.05..11.05 rows=40 width=12) (actual time=0.073..0.074 rows=40 loops=1)"
"                                Buckets: 1024  Batches: 1  Memory Usage: 10kB"
"                                ->  Subquery Scan on cessions_count  (cost=10.25..11.05 rows=40 width=12) (actual time=0.059..0.068 rows=40 loops=1)"
"                                      ->  HashAggregate  (cost=10.25..10.65 rows=40 width=12) (actual time=0.059..0.064 rows=40 loops=1)"
"                                            Group Key: cessions.cession_group_id"
"                                            Batches: 1  Memory Usage: 24kB"
"                                            ->  Seq Scan on cessions  (cost=0.00..9.50 rows=150 width=4) (actual time=0.003..0.030 rows=150 loops=1)"
"        ->  Hash  (cost=5.00..5.00 rows=200 width=23) (actual time=0.075..0.075 rows=200 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 20kB"
"              ->  Seq Scan on debtors  (cost=0.00..5.00 rows=200 width=23) (actual time=0.009..0.038 rows=200 loops=1)"
"Planning Time: 0.401 ms"
"Execution Time: 0.580 ms"								


-- Видим, что стоимость запроса к таблице contracts составляет 14, произведено последовательное сканирование 400 строк. Индексируем.
CREATE INDEX contracts_cession_group_id_idx ON contracts(cession_group_id);
 
 --Проверяем
"Sort  (cost=46.15..46.48 rows=133 width=36) (actual time=0.647..0.659 rows=283 loops=1)"
"  Sort Key: contracts.id"
"  Sort Method: quicksort  Memory: 43kB"
"  ->  Hash Join  (cost=19.20..41.46 rows=133 width=36) (actual time=0.172..0.576 rows=283 loops=1)"
"        Hash Cond: (contracts.debtor_id = debtors.id)"
"        ->  Nested Loop  (cost=11.70..33.27 rows=133 width=8) (actual time=0.093..0.304 rows=283 loops=1)"
"              ->  Hash Join  (cost=11.55..23.32 rows=13 width=8) (actual time=0.080..0.097 rows=28 loops=1)"
"                    Hash Cond: (cessions_groups.id = cessions_count.cession_group_id)"
"                    Join Filter: (cessions_groups.cessions_amount > cessions_count.quantity)"
"                    Rows Removed by Join Filter: 12"
"                    ->  Seq Scan on cessions_groups  (cost=0.00..11.40 rows=140 width=8) (actual time=0.003..0.009 rows=40 loops=1)"
"                    ->  Hash  (cost=11.05..11.05 rows=40 width=12) (actual time=0.073..0.074 rows=40 loops=1)"
"                          Buckets: 1024  Batches: 1  Memory Usage: 10kB"
"                          ->  Subquery Scan on cessions_count  (cost=10.25..11.05 rows=40 width=12) (actual time=0.058..0.067 rows=40 loops=1)"
"                                ->  HashAggregate  (cost=10.25..10.65 rows=40 width=12) (actual time=0.058..0.063 rows=40 loops=1)"
"                                      Group Key: cessions.cession_group_id"
"                                      Batches: 1  Memory Usage: 24kB"
"                                      ->  Seq Scan on cessions  (cost=0.00..9.50 rows=150 width=4) (actual time=0.003..0.030 rows=150 loops=1)"
"              ->  Index Scan using contracts_cession_group_id_idx on contracts  (cost=0.15..0.67 rows=10 width=12) (actual time=0.002..0.006 rows=10 loops=28)"
"                    Index Cond: (cession_group_id = cessions_groups.id)"
"        ->  Hash  (cost=5.00..5.00 rows=200 width=23) (actual time=0.073..0.073 rows=200 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 20kB"
"              ->  Seq Scan on debtors  (cost=0.00..5.00 rows=200 width=23) (actual time=0.009..0.036 rows=200 loops=1)"
"Planning Time: 0.532 ms"
"Execution Time: 0.709 ms"
-- Как видим стоимость запроса уменьшилась до 0,4. Также индексируем cessions_groups.cession_amount,
-- так как послдеовательное сканирование, стоимость запроса 11, 140 строк, индексирование не займет много места, так как числовой тип.
CREATE INDEX cessions_groups_cession_amount ON cessions_groups(cessions_amount);
"Sort  (cost=42.59..42.92 rows=133 width=36) (actual time=0.642..0.655 rows=283 loops=1)"
"  Sort Key: contracts.id"
"  Sort Method: quicksort  Memory: 43kB"
"  ->  Hash Join  (cost=20.95..37.89 rows=133 width=36) (actual time=0.191..0.596 rows=283 loops=1)"
"        Hash Cond: (contracts.debtor_id = debtors.id)"
"        ->  Hash Join  (cost=13.45..29.70 rows=133 width=8) (actual time=0.104..0.355 rows=283 loops=1)"
"              Hash Cond: (contracts.cession_group_id = cessions_count.cession_group_id)"
"              Join Filter: (cessions_groups.cessions_amount > cessions_count.quantity)"
"              Rows Removed by Join Filter: 117"
"              ->  Hash Join  (cost=1.90..17.06 rows=400 width=20) (actual time=0.025..0.189 rows=400 loops=1)"
"                    Hash Cond: (contracts.cession_group_id = cessions_groups.id)"
"                    ->  Seq Scan on contracts  (cost=0.00..14.00 rows=400 width=12) (actual time=0.006..0.091 rows=400 loops=1)"
"                    ->  Hash  (cost=1.40..1.40 rows=40 width=8) (actual time=0.014..0.015 rows=40 loops=1)"
"                          Buckets: 1024  Batches: 1  Memory Usage: 10kB"
"                          ->  Seq Scan on cessions_groups  (cost=0.00..1.40 rows=40 width=8) (actual time=0.003..0.008 rows=40 loops=1)"
"              ->  Hash  (cost=11.05..11.05 rows=40 width=12) (actual time=0.076..0.077 rows=40 loops=1)"
"                    Buckets: 1024  Batches: 1  Memory Usage: 10kB"
"                    ->  Subquery Scan on cessions_count  (cost=10.25..11.05 rows=40 width=12) (actual time=0.061..0.071 rows=40 loops=1)"
"                          ->  HashAggregate  (cost=10.25..10.65 rows=40 width=12) (actual time=0.061..0.066 rows=40 loops=1)"
"                                Group Key: cessions.cession_group_id"
"                                Batches: 1  Memory Usage: 24kB"
"                                ->  Seq Scan on cessions  (cost=0.00..9.50 rows=150 width=4) (actual time=0.004..0.031 rows=150 loops=1)"
"        ->  Hash  (cost=5.00..5.00 rows=200 width=23) (actual time=0.079..0.080 rows=200 loops=1)"
"              Buckets: 1024  Batches: 1  Memory Usage: 20kB"
"              ->  Seq Scan on debtors  (cost=0.00..5.00 rows=200 width=23) (actual time=0.010..0.040 rows=200 loops=1)"
"Planning Time: 0.614 ms"
"Execution Time: 0.711 ms"

-- Видим, что общая стоимость запроса уменьшилась до 43 пунктов. Также уберем ORDER BY из запроса.
"Hash Join  (cost=20.95..37.89 rows=133 width=36)"
"  Hash Cond: (contracts.debtor_id = debtors.id)"
"  ->  Hash Join  (cost=13.45..29.70 rows=133 width=8)"
"        Hash Cond: (contracts.cession_group_id = cessions_count.cession_group_id)"
"        Join Filter: (cessions_groups.cessions_amount > cessions_count.quantity)"
"        ->  Hash Join  (cost=1.90..17.06 rows=400 width=20)"
"              Hash Cond: (contracts.cession_group_id = cessions_groups.id)"
"              ->  Seq Scan on contracts  (cost=0.00..14.00 rows=400 width=12)"
"              ->  Hash  (cost=1.40..1.40 rows=40 width=8)"
"                    ->  Seq Scan on cessions_groups  (cost=0.00..1.40 rows=40 width=8)"
"        ->  Hash  (cost=11.05..11.05 rows=40 width=12)"
"              ->  Subquery Scan on cessions_count  (cost=10.25..11.05 rows=40 width=12)"
"                    ->  HashAggregate  (cost=10.25..10.65 rows=40 width=12)"
"                          Group Key: cessions.cession_group_id"
"                          ->  Seq Scan on cessions  (cost=0.00..9.50 rows=150 width=4)"
"  ->  Hash  (cost=5.00..5.00 rows=200 width=23)"
"        ->  Seq Scan on debtors  (cost=0.00..5.00 rows=200 width=23)"
-- Отлично, теперь стоимость запроса составляет 38 пунктов.
				
				
